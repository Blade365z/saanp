{"version":3,"sources":["components/helper.js","components/Board.js","components/App.js","index.js"],"names":["getRandomGrid","numOfRows","numOfCols","row","Math","floor","random","col","getInitialLocationForSnake","Board","renderGrid","a","grid","isFood","isHead","isTail","state","food","snakeHead","snakeTail","map","t","push","cols","rows","setState","moveSnakeInDirection","snakeHEADState","tail","checkIfGameOverOREat","checking","unshift","gameOver","snakeEatsFood","direction","currentDirection","slice","numberOfTails","InitalizeSnakeOnBoard","newPos","InitializeFoodOnBoard","unique","pos","componentDidMount","document","body","addEventListener","handleKeyPress","e","key","directionType","keyCode","currentGameSate","outcome","score","speed","clearInterval","positionUpdater","updatePosition","restartGame","startGame","setInterval","removeEventListener","this","listOfGrids","className","toString","style","marginTop","margin","color","onClick","class","display","justifyContent","fontSize","paddingTop","Component","App","textAlign","marginBottom","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ce1b2bec.chunk.js","sourcesContent":["export const getRandomGrid = (numOfRows, numOfCols) => {\n    let row = Math.floor((Math.random() * numOfRows));\n    let col = Math.floor((Math.random() * numOfCols))\n    return {\n        row: row,\n        col: col\n    }\n\n}\n\n\nexport const getInitialLocationForSnake = (numOfRows, numOfCols) => {\n    let row = Math.floor(numOfRows / 2);\n    let col = Math.floor(numOfCols / 2);\n    return {\n        row: row,\n        col: col\n    }\n\n}","import React, { Component } from 'react'\nimport { getInitialLocationForSnake, getRandomGrid } from './helper';\nimport './saanp.css';\n\n\nclass Board extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            rows: 20,\n            cols: 20,\n            grid: [],\n            snakeHead: getInitialLocationForSnake(20, 20),\n            food: getRandomGrid(20, 20),\n            snakeTail: [],\n            score: 0,\n            currentDirection: 'right',\n            numberOfTails: 2,\n            currentGameSate: 0,\n            speed: 200\n        }\n    }\n    // initialState = this.state;;\n    renderGrid = async () => {\n        var grid = [];\n        for (let row = 0; row < this.state.rows; row++) {\n            for (let col = 0; col < this.state.cols; col++) {\n                let isFood = false,\n                    isHead = false,\n                    isTail = false;\n                if (row === this.state.food.row && col === this.state.food.col) {\n                    isFood = true;\n                }\n                if (row === this.state.snakeHead.row && col === this.state.snakeHead.col) {\n                    isHead = true;\n                }\n                this.state.snakeTail.map(t => {\n                    if (row === t.row && col === t.col) {\n                        isTail = true;\n                    }\n                })\n                grid.push({\n                    row,\n                    col,\n                    isFood,\n                    isHead,\n                    isTail\n                })\n            }\n        }\n        this.setState({\n            grid: grid\n        })\n    }\n    moveSnakeInDirection = async () => {\n        var snakeHEADState = this.state.snakeHead;\n        let tail = this.state.snakeTail;\n        let checking = await this.checkIfGameOverOREat();\n        tail.unshift({\n            row: snakeHEADState.row,\n            col: snakeHEADState.col,\n        })\n        if (checking === -1) {\n            this.gameOver();\n            return 0;\n        } else {\n            if (checking === 1) {\n                this.snakeEatsFood();\n            }\n            let direction = this.state.currentDirection;\n            if (direction === 'right') {\n                snakeHEADState.col++;\n            } else if (direction === 'left') {\n                snakeHEADState.col--;\n            } else if (direction === 'up') {\n                snakeHEADState.row--;\n            } else if (direction === 'down') {\n                snakeHEADState.row++;\n            }\n            this.setState({\n                snakeHead: snakeHEADState,\n                snakeTail: tail.slice(0, this.state.numberOfTails)\n            });\n            this.renderGrid();\n\n        }\n\n    }\n    InitalizeSnakeOnBoard = () => {\n        let rows = this.state.rows;\n        let cols = this.state.cols;\n        let newPos = getInitialLocationForSnake(rows, cols)\n        this.setState({\n            snakeHead: newPos\n        })\n        return newPos;\n    }\n    InitializeFoodOnBoard = () => {\n        let rows = this.state.rows;\n        let cols = this.state.cols;\n        let newPos = getRandomGrid(rows, cols)\n        let unique = false;\n        while (unique === false) {\n            this.state.snakeTail.map(pos => {\n                if (newPos.row === pos.row && newPos.col === pos.col) {\n                    newPos = getRandomGrid(rows, cols)\n                    unique = false;\n                }\n                else {\n                    unique = true;\n                }\n            })\n            if (newPos.row === this.state.snakeHead.row && newPos.col === this.state.snakeHead.col) {\n                newPos = getRandomGrid(rows, cols)\n                unique = false;\n            }\n        }\n        this.setState({\n            food: newPos\n        })\n        return newPos;\n    }\n    componentDidMount = () => {\n        document.body.addEventListener('keydown', this.handleKeyPress);\n        this.renderGrid();\n\n\n    }\n    componentWillUnmount() {\n        document.body.removeEventListener('keydown', this.handleKeyPress);\n    }\n\n    handleKeyPress = (e,key=null) => {\n        let currentDirection = null;\n        let directionType = {\n            'right': 'horizontal',\n            'left': 'horizontal',\n            'up': 'vertical',\n            'down': 'vertical'\n        };\n        if(key==null){\n            key = e.keyCode;\n        }\n        switch (key) {\n            case 37:\n                currentDirection = 'left';\n                break;\n\n            case 38:\n                currentDirection = 'up';\n                break;\n\n            case 39:\n            default:\n                currentDirection = 'right';\n                break;\n\n            case 40:\n                currentDirection = 'down';\n                break;\n        }\n        if (this.state.currentGameSate === 1) {\n            if ((this.state.currentDirection !== currentDirection) && (directionType[this.state.currentDirection] !== directionType[currentDirection])) {\n                this.setState({\n                    currentDirection: currentDirection\n                })\n                this.moveSnakeInDirection(currentDirection)\n            }\n        }\n    }\n    checkIfGameOverOREat = async () => {\n        const { row, col } = this.state.snakeHead;\n        let outcome = 0;\n        this.state.snakeTail.map(pos => {\n            if (row === pos.row && col === pos.col) {\n                outcome = -1;\n            }\n        })\n        if (row === this.state.food.row && col === this.state.food.col) {\n            outcome = 1;\n        } else {\n            if (row + 1 > this.state.rows || col + 1 > this.state.cols) {\n                outcome = -1;\n            }\n            if (row < 0 || col < 0) {\n                outcome = -1;\n            }\n        }\n        return outcome;\n    }\n    snakeEatsFood = () => {\n        this.InitializeFoodOnBoard();\n        this.setState({\n            numberOfTails: this.state.numberOfTails + 1,\n            score: this.state.score + 10,\n            speed: this.state.speed - 10\n        });\n        clearInterval(this.positionUpdater);\n        this.updatePosition();\n    }\n    positionUpdater = null;\n    gameOver = () => {\n        this.setState({\n            currentGameSate: -1\n        })\n        clearInterval(this.positionUpdater)\n    }\n    restartGame = () => {\n        this.setState({\n            grid: [],\n            snakeHead: getInitialLocationForSnake(20, 20),\n            food: getRandomGrid(20, 20),\n            snakeTail: [],\n            score: 0,\n            currentDirection: 'right',\n            numberOfTails: 2,\n            currentGameSate: 0,\n            speed: 200\n        });\n        this.startGame()\n    }\n    startGame = () => {\n        this.setState({\n            currentGameSate: 1\n        })\n        this.updatePosition();\n    }\n    updatePosition = () => {\n        this.positionUpdater = setInterval(() => {\n            this.moveSnakeInDirection();\n        }, this.state.speed);\n    }\n    render() {\n        const listOfGrids = this.state.grid.map(grid => {\n            return <div key={grid.row.toString() + '-' + grid.col.toString()}\n                className={\n                    grid.isHead ?\n                        'square snake-head' : grid.isTail ?\n                            'square snake-tail' : grid.isFood ?\n                                'square food-item' : 'square'\n\n                } > </div>\n        })\n        return (<div>\n             <div style={{ marginTop: '0px' }}>\n                {this.state.currentGameSate === -1 && <div><h3 style={{ margin: '0px', color: 'red' }}>Game over!</h3></div>}\n                <div><h5>Score: {this.state.score}</h5></div>\n            </div>\n            <div className=\"mainBoard\" > {listOfGrids} </div>\n            <div style={{ marginTop: '10px' }}>\n                {this.state.currentGameSate === 0 && <button className=\"ui labeled icon  basic button\" onClick={this.startGame}>\n                    <i className=\"play icon\"></i>\n                        Play\n                    </button>}\n            </div>\n            <div style={{ marginTop: '10px' }}>\n                {this.state.currentGameSate === -1 && <button className=\"ui labeled icon  basic button\" onClick={this.restartGame}>\n                    <i className=\"redo icon\"></i>\n                        Replay\n                    </button>}\n            </div>\n           \n            {\n                this.state.currentGameSate  ===1 && \n            <div className=\"controlBtns\">\n                <div>\n                    <button class=\"ui basic button \"  onClick={()=>{\n                        this.handleKeyPress(null,38)\n                    }} >\n                        <i class=\"angle up icon horizontalBtns\" ></i>\n                    </button>\n                </div>\n                <div style={{display:'flex',justifyContent:'center'}}>\n                    <div className=\"LinearControlButtons\">\n                    <button class=\"ui basic button \" onClick={()=>{\n                        this.handleKeyPress(null,37)\n                    }}  >\n                        <i class=\"angle left icon horizontalBtns\"></i>\n                    </button>\n                    </div>\n                    <div className=\"LinearControlButtons\">\n                    <button class=\"ui basic button\"  onClick={()=>{\n                        this.handleKeyPress(null,39)\n                    }} >\n                        <i class=\"angle right icon \" ></i>\n                    </button>\n                    </div>\n                </div>\n                <div>\n                    <button class=\"ui basic button \" onClick={()=>{\n                        this.handleKeyPress(null,40)\n                    }} >\n                        <i class=\"angle down icon horizontalBtns\"  ></i>\n                    </button>\n                </div>\n            </div>\n            }\n             <div className=\"footer\"> \n                    <small style={{margin:'0'}}>Made with <span style={{color:'red',fontSize:'0.8em',paddingTop:'10'}}> ❤ </span> by blade</small> \n                </div>\n        </div>)\n    }\n}\nexport default Board;","import React from 'react'\nimport Board from './Board';\n\nfunction App() {\n    return (\n        <div className=\"ui container\">\n            <div style={{ justifyContent: 'center', textAlign: 'center', paddingTop: '20px' }}>\n                <h3 style={{ textAlign: 'center' , marginBottom:'3px' }}>LETS KILL SOME TIME BRO.</h3>\n                <Board />\n               \n\n            </div>\n            \n        </div>\n    )\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(<App></App>, document.getElementById('root'));"],"sourceRoot":""}